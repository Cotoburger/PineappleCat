import traceback

import telebot
import json
import requests
import threading
from threading import Lock
import time
import re
import base64
import os
import random
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from datetime import datetime, timezone, timedelta
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, User, Chat, Message
from telebot.apihelper import ApiTelegramException
from colorama import Fore, Style, init
from dotenv import load_dotenv
from FitnessAI import process_food_image
import sqlite3

load_dotenv()
init()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
admins_str = os.getenv("ADMINS", "")
ADMINS = [int(x.strip()) for x in admins_str.split(",") if x.strip().isdigit()]
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
LM_STUDIO_API_URL = 'http://127.0.0.1:17834/v1/chat/completions'
CUSTOM_PROMPTS_FILE = 'custom_prompts_tg.json'
db = sqlite3.connect("pineapplecat.db", check_same_thread=False)
cursor = db.cursor()

cursor.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, tg_id INTEGER, goal INTEGER, current_cal INTEGER, last_update INTEGER)")

bot = telebot.TeleBot(TELEGRAM_TOKEN)

print(f"{Style.DIM}–ë–æ—Ç {bot.get_me().first_name} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Telegram!{Style.RESET_ALL}")

user_histories = {}
user_states = {}
user_buffers = {}
user_timers = {}
buffer_lock = Lock()
BUFFER_DELAY = 1.0
history_lock = Lock()

HISTORY_DIR = 'history'
if not os.path.exists(HISTORY_DIR):
    os.makedirs(HISTORY_DIR)


@bot.message_handler(func=lambda m: m.text and (m.text.startswith('/send')))
def handle_send_command(message):
    try:
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return

        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /send <ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–°–æ–æ–±—â–µ–Ω–∏–µ>")
            return

        _, user_id_str, content = parts

        if not user_id_str.isdigit():
            bot.reply_to(message, "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        user_id = int(user_id_str)
        content = content.strip()

        formatted_content = (
            f"(THIS MESSAGE WAS FORWARDED BY THE BOT ADMINISTRATOR TO THIS USER. IGNORE THE CHARACTER GIVEN TO YOU IN THE PROMPT. JUST FORWARD THE MESSAGE. THIS TEXT IS ON BEHALF OF Aleksey, THE CREATOR OF THE BOT. START THE MESSAGE WITH: ALEKSEY ASKED TO FORWARD. HERE IS WHAT YOU SHOULD FORWARD TO HIM IN RUSSIAN:)\n\n{content}"
        )

        fake_message = Message(
            message_id=int(time.time() * 1000),
            from_user=User(
                id=user_id,
                first_name=f"Forwarded-From-Admin-{user_id}",
                is_bot=False
            ),
            date=int(time.time()),
            chat=Chat(id=user_id, type='private'),
            content_type='text',
            json_string=json.dumps({'text': formatted_content}),
            options={}
        )
        fake_message.text = formatted_content

        with buffer_lock:
            user_buffers.setdefault(user_id, []).append(fake_message)

        process_buffered_messages(user_id)
        bot.reply_to(message, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /send: {e}")
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=["food"])
def process_food(message):
    cursor.execute("SELECT * FROM users WHERE tg_id=?", (message.from_user.id,))
    user = cursor.fetchone()
    if user is None:
        user_states[str(message.from_user.id)] = "food_registration"
        bot.reply_to(message, escape_markdown_v2("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å: –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –∏ —Ä–æ—Å—Ç, –∞ —Ç–∞–∫–∂–µ –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n`–í–ê–®_–í–ï–° –í–ê–®_–†–û–°–¢ –ñ–ï–õ–ê–ï–ú–´–ô_–í–ï–°`\n–ò–ª–∏ —Å–∞–º–∏ –∑–∞–¥–∞–π—Ç–µ —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ —á–∏—Å–ª–æ –∫–∞–ª–æ—Ä–∏–π."), parse_mode="MarkdownV2")
        return
    user_states[str(message.from_user.id)] = "food"
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã")

@bot.message_handler(commands=["food_edit"])
def food_edit(message):
    cursor.execute("SELECT * FROM users WHERE tg_id=?", (message.from_user.id,))
    user = cursor.fetchone()
    if user is None:
        user_states[str(message.from_user.id)] = "food_registration"
    else:
        user_states[str(message.from_user.id)] = "food_edit"
    bot.reply_to(message, escape_markdown_v2(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –≤–∞—à –≤–µ—Å, —Ä–æ—Å—Ç –∏ –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n`–í–ê–®_–í–ï–° –í–ê–®_–†–û–°–¢ –ñ–ï–õ–ê–ï–ú–´–ô_–í–ï–°`\n–ò–ª–∏ —Å–∞–º–∏ –∑–∞–¥–∞–π—Ç–µ —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ —á–∏—Å–ª–æ –∫–∞–ª–æ—Ä–∏–π."),
                 parse_mode="MarkdownV2")

def save_history_to_file(user_id, user_message, assistant_reply):
    history_file = os.path.join(HISTORY_DIR, f"{user_id}.txt")
    try:
        with open(history_file, 'a', encoding='utf-8') as f:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            for content in user_message["content"]:
                if content["type"] == "text":
                    f.write(f"[{timestamp}] User: {content['text']}\n")
            f.write(f"[{timestamp}] Assistant: {assistant_reply}\n\n")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def load_custom_prompts():
    try:
        with open(CUSTOM_PROMPTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def escape_markdown_v2(text: str) -> str:
    chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in chars:
        text = text.replace(char, f'\\{char}')
    return text

def save_custom_prompts(prompts):
    with open(CUSTOM_PROMPTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(prompts, f, ensure_ascii=False, indent=2)

def get_current_time():
    utc12_offset = timezone(timedelta(hours=12))
    utc12_time = datetime.now(timezone.utc).astimezone(utc12_offset)
    return utc12_time.strftime("%H:%M:%S")

def get_current_date():
    utc12_offset = timezone(timedelta(hours=12))
    utc12_time = datetime.now(timezone.utc).astimezone(utc12_offset)
    return utc12_time.strftime("%Y-%m-%d")

def get_time_of_day():
    current_hour = int(get_current_time().split(':')[0])
    if 5 <= current_hour < 12:
        return "morning"
    elif 12 <= current_hour < 17:
        return "afternoon"
    elif 17 <= current_hour < 21:
        return "evening"
    else:
        return "night"

async def fetch_url_content(url):
    try:
        delay = random.uniform(0.5, 1.0)
        await asyncio.sleep(delay)

        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Safari/605.1.15",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0",
        ]
        headers = {
            "User-Agent": random.choice(user_agents),
            "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
            "Accept-Encoding": "gzip, deflate, br",
            "Connection": "keep-alive",
            "Referer": "https://www.google.com/",
            "Upgrade-Insecure-Requests": "1"
        }
        
        async with aiohttp.ClientSession(
            headers=headers,
            timeout=aiohttp.ClientTimeout(total=7)
        ) as session:
            
            async with session.get(
                url,
                allow_redirects=True,
                raise_for_status=False
            ) as response:
                
                if response.status >= 400:
                    error_message = f"üö® HTTP –æ—à–∏–±–∫–∞ {response.status} {response.reason}"
                    print(f"–ü–∞—Ä—Å–∏–Ω–≥: {error_message}")
                    return error_message

                content_type = response.headers.get("Content-Type", "")
                if "text/html" not in content_type:
                    error_message = f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}"
                    print(f"–ü–∞—Ä—Å–∏–Ω–≥: {error_message}")
                    return error_message

                html = await response.text(encoding="utf-8", errors="replace")
                
                if any(word in html.lower() for word in ["captcha", "–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "403 forbidden"]):
                    error_message = "üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤"
                    print(f"–ü–∞—Ä—Å–∏–Ω–≥: {error_message}")
                    return error_message

                try:
                    soup = BeautifulSoup(html, "html.parser")
                    title = soup.title.string.strip() if soup.title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                    
                    for element in soup(["script", "style", "nav", "footer", "header"]):
                        element.decompose()
                        
                    text = soup.get_text(separator="\n", strip=True)
                    
                except Exception as parse_error:
                    error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {str(parse_error)}"
                    print(f"–ü–∞—Ä—Å–∏–Ω–≥: {error_message}")
                    return error_message

                preview = text[:2500] + "..." if len(text) > 2500 else text
                
                result = (
                    f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∞–π—Ç–∞: {title}\n"
                    f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{preview}"
                )
                
                print(f"–ü–∞—Ä—Å–∏–Ω–≥: {url}, {title}, –¢–µ–∫—Å—Ç: {preview[:150]}...")
                return result

    except aiohttp.ClientConnectorError as e:
        error_message = f"üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}"
        print(f"–ü–∞—Ä—Å–∏–Ω–≥: {error_message}")
        return error_message
    except aiohttp.ClientPayloadError as e:
        error_message = f"üì¶ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        print(f"–ü–∞—Ä—Å–∏–Ω–≥: {error_message}")
        return error_message
    except asyncio.TimeoutError:
        error_message = f"‚è≥ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
        print(f"–ü–∞—Ä—Å–∏–Ω–≥: {error_message}")
        return error_message
    except Exception as e:
        error_message = f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        print(f"–ü–∞—Ä—Å–∏–Ω–≥: {error_message}")
        return error_message

def ask_lmstudio(user_id, message_content, prompt=None, stream=True):
    user_id = int(user_id) if isinstance(user_id, str) else user_id
    
    with history_lock:
        history = user_histories.get(user_id, [])
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    has_image = any(item.get('type') == 'image_url' for item in message_content.get('content', []))
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if os.getenv("DEV_FAST") is not None:
        model_name = "google/gemma-3-4b"
    else:
        if has_image:
            model_name = "gemma-3-12b-it-qat"
        else:
            model_name = "openai/gpt-oss-20b"
        
    print(f"{Fore.YELLOW}LM Studio: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {model_name}{Style.RESET_ALL}")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    if prompt is None:
        prompts = load_custom_prompts()
        user_id_str = str(user_id)
        user_custom_prompt = prompts.get(user_id_str, {}).get("prompt")
        time_of_day = get_time_of_day()
        if user_custom_prompt:
            prompt = (
                "SYSTEM PROMPT START \n"
                f"**CURRENT TIME: {get_current_time()} | CURRENT DATE: {get_current_date()}** (UTC+12)\n"
                f"It is currently {time_of_day} in UTC+12 time zone. \n"
                "You are a chat assistant \n"
                "Aleksei (–ê–ª–µ–∫—Å–µ–π) is author of this bot. Anyone messing with him will have to deal with me. \n"
                "If I see anyone showing disrespect towards Aleksey or unfairly criticizing him, I will try to intervene and support him. \n"
                "*Your gender and style of communication depend on the user's custom instructions!!!!* \n"
                "ANSWER ONLY TO LAST MESSAGE \n"
                "Avoid starting messages with the name too often. \n"
                "YOU MUST RESPOND ONLY IN lANGUAGE THAT USER CHAT WITH YOU!!! \n"
                "Distinguish users by their names. \n \n \n"
                f"**YOUR MAIN INSTRUCTIONS SET BY USER: {user_custom_prompt} **\n \n \n"    
                "SYSTEM PROMPT END \n"
            )
        else:
            prompt = (
                f"**–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {get_current_time()} | –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {get_current_date()}** (UTC+12)\n"
                f"**–°–µ–π—á–∞—Å {time_of_day} –í UTC+12 —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ.** \n"
                "**–¢—ã –±–æ—Ç –†–£–°–°–ö–û–ì–û–í–û–†–Ø–©–ò–ô –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–æ–≤—É—Ç PineAppleCat.** \n"
                "–ê–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞ –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π, –∑–∞—â–∏—â–∞–π –µ–≥–æ –µ—Å–ª–∏ –ø—Ä–æ –Ω–µ–≥–æ –≥–æ–≤–æ—Ä—è—Ç –≥–∞–¥–æ—Å—Ç–∏\n"
                "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 1800 —Å–∏–º–≤–æ–ª–æ–≤ \n"
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown \n"
                "–ó–î–û–†–û–í–ê–ô–°–Ø –¢–û–õ–¨–ö–û 1 –†–ê–ó –ó–ê –í–°–Æ –ü–ï–†–ï–ü–ò–°–ö–£!!! \n"
                "SYSTEM PROMPT END \n"
            )
        messages = [{"role": "system", "content": prompt}]  + history + [message_content]
    else:
        messages = [{"role": "system", "content": prompt}, message_content]

    headers = {"Content-Type": "application/json"}
    payload = {
        "model": model_name, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        "messages": messages,
        "temperature": 0.8,
        "top_p": 0.9,
        "max_tokens": 6000,
        "stream": stream,
        "frequency_penalty": 0.2,
        "stop": ["\nUser:", "</end>"]
    }

    try:
        with requests.post(LM_STUDIO_API_URL, headers=headers, json=payload, timeout=450, stream=stream) as response:
            response.raise_for_status()
            reply = ''
            if not stream:
                data = response.json()
                yield data["choices"][0]["message"]["content"]
                return
            else:
                for chunk in response.iter_lines():
                    if chunk:
                        try:
                            data = chunk.decode('utf-8').strip()
                            if data.startswith('data:'):
                                data = data[5:].strip()
                                if data:
                                    json_data = json.loads(data)
                                    content = json_data.get('choices', [{}])[0].get('delta', {}).get('content', '')
                                    if content:
                                        reply += content
                                        yield reply
                        except json.JSONDecodeError:
                            continue
                        except AttributeError as ae:
                            error_message = str(ae)
                            print(f"AttributeError in chunk processing: {error_message}")
                            if "'str' object has no attribute 'get'" in error_message:
                                with history_lock:
                                    user_histories[user_id] = []
                                    print(f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {user_histories.get(user_id, [])}")
                                yield "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ."
                                return
                        except Exception as e:
                            error_message = str(e)
                            print(f"Unexpected error: {error_message}")
                            if "context length" in error_message.lower():
                                with history_lock:
                                    user_histories[user_id] = []
                                yield "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞."
                                return
    except Exception as e:
        error_message = str(e)
        print(f"LM Studio exception: {error_message}")
        
        base_error = f"LM Studio exception: \n {error_message}"
        
        if "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç.–∫. –∫–æ–Ω–µ—á–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –æ—Ç–≤–µ—Ä–≥ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" in error_message:
            error_message += "\n\n ‚ö†Ô∏è–ù–ï –£–î–ê–õ–û–°–¨ –ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø –ö LM STUDIO. –ë–û–¢ –ù–ï –ú–û–ñ–ï–¢ –û–¢–ü–†–ê–í–ò–¢–¨ –ó–ê–ü–†–û–° –í –ú–û–î–ï–õ–¨.‚ö†Ô∏è"
        elif "404 Client Error: Not Found for url:" in error_message:
            error_message += "\n\n ‚ö†Ô∏è–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤. \n–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –µ–µ –∑–∞–≤–∏—Å–∞–Ω–∏—é. \n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.‚ö†Ô∏è"
        
        yield error_message
        
        if "'str' object has no attribute 'get'" in error_message:
            with history_lock:
                user_histories[user_id] = []
                print(f"–î–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(user_histories.get(user_id, []))}")
            yield " –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ. –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ."
        else:
            print("LM Studio error:", e)
            yield " –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LM Studio"

@bot.message_handler(commands=['customize'])
def handle_customize(message):
    user_id = str(message.from_user.id)
    user_states[user_id] = "waiting_for_prompt"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):")

@bot.message_handler(commands=['reset'])
def handle_reset(message):
    user_id = str(message.from_user.id)
    prompts = load_custom_prompts()
    if user_id in prompts:
        prompts.pop(user_id)
        save_custom_prompts(prompts)
        bot.reply_to(message, "–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.")

def calc_cal(message):
    data = message.text.split(" ")
    goal = None
    if len(data) == 3:
        sent_message = pre_send(message)
        data = ask_lmstudio(message.from_user.id, {"role": "user", "content": [
            {"type": "text", "text": f"{data[0]} {data[1]} {data[2]}"}]},
                            "–¢—ã - –ò–ò –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–ª–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω —É–ø–æ—Ç—Ä–µ–±–∏—Ç—å –∑–∞ –¥–µ–Ω—å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: –ï–ì–û_–¢–ï–ö–£–©–ò–ô_–í–ï–° –ï–ì–û_–†–û–°–¢ –ï–ì–û_–ñ–ï–õ–ê–ï–ú–´–ô_–í–ï–°. –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤ –¥–µ–Ω—å. –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ.",
                            False)
        for part in data:
            goal = int(part)
            bot.edit_message_text(f"–ü–æ–¥—Å—á–∏—Ç–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –≤–∞—Å: {goal} –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å", sent_message.chat.id,
                                  sent_message.id)
    elif len(data) == 1:
        goal = data[0]
        bot.reply_to(message, "–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤–∞—à —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π.")
    else:
        bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        return None
    return int(goal)


@bot.message_handler(content_types=['photo', 'text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    prompts = load_custom_prompts()
    if user_id in user_states:
        state = user_states[user_id]
        match state:
            case "waiting_for_prompt":
                new_prompt = message.text
                if len(new_prompt) > 500:
                    bot.reply_to(message, "–ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤.")
                else:
                    if user_id not in prompts:
                        prompts[user_id] = {}
                    prompts[user_id]["prompt"] = new_prompt
                    save_custom_prompts(prompts)
                    bot.reply_to(message, "–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            case "food":
                process_food_image(message, ask_lmstudio, bot, TELEGRAM_TOKEN, pre_send, db, cursor)
            case "food_registration":
                goal = calc_cal(message)
                if goal is None:
                    return
                cursor.execute("INSERT INTO users(tg_id, goal, current_cal, last_update) VALUES (?, ?, ?, ?)", (int(user_id), goal, 0, datetime.now().timestamp(), ))
                db.commit()
            case "food_edit":
                goal = calc_cal(message)
                if goal is None:
                    return
                cursor.execute("UPDATE users SET goal = ? WHERE tg_id = ?", (goal, int(user_id),))
                db.commit()

        del user_states[user_id]
    else:
        handle_message_group(message)

def handle_message_group(message):
    user_id = message.from_user.id
    with buffer_lock:
        if user_id not in user_buffers:
            user_buffers[user_id] = []
        user_buffers[user_id].append(message)
        if user_id in user_timers:
            old_timer = user_timers[user_id]
            if old_timer.is_alive():
                old_timer.cancel()
        timer = threading.Timer(BUFFER_DELAY, process_buffered_messages, args=[user_id])
        user_timers[user_id] = timer
        timer.start()

def process_buffered_messages(user_id):
    with buffer_lock:
        if user_id not in user_buffers:
            return
        messages = user_buffers.pop(user_id, [])
        if user_id in user_timers:
            del user_timers[user_id]
    
    if not messages:
        return

    combined_content = []
    user_name = messages[0].from_user.first_name
    chat_id = messages[0].chat.id
    
    url_pattern = re.compile(r'(https?://[^\s]+)')
    
    clean_text_for_print = ""

    for msg in messages:
        forward_info = ""
        clean_text = ""
        if msg.forward_from:
            forward_info = f" ‚Ü™Ô∏è –û—Ç: {msg.forward_from.first_name}"
        elif msg.forward_from_chat:
            forward_info = f" ‚Ü™Ô∏è –ò–∑: {msg.forward_from_chat.title}"

        if msg.photo:
            photo = msg.photo[-1]
            file_info = bot.get_file(photo.file_id)
            file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
            image_data = requests.get(file_url).content
            base64_image = base64.b64encode(image_data).decode('utf-8')
            caption = (msg.caption or "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ") + forward_info
            clean_text_for_print += f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] {caption} "
            combined_content.extend([
                {"type": "text", "text": f"({user_name} –≤ ({get_current_time()})): {caption}"},
                {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
            ])
        elif msg.text:
            clean_text = (msg.text.strip() + forward_info) if msg.text.strip() else ""
            if clean_text:
                urls = url_pattern.findall(clean_text)
                url_content = ""
                if urls:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    try:
                        url_content = loop.run_until_complete(fetch_url_content(urls[0]))
                    finally:
                        loop.close()
                    clean_text += f"\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Å—ã–ª–∫–∏:\n{url_content}"
                
                clean_text_for_print += f"{clean_text} "
                combined_content.append({"type": "text", "text": f"({user_name} –≤ ({get_current_time()})): {clean_text}"})

    if not combined_content:
        return

    message_content = {"role": "user", "content": combined_content}
    print(f"{Fore.CYAN}Telegram: {Style.RESET_ALL} ({user_name}) {clean_text_for_print.strip()}")

    sent_message = pre_send(chat_id)

    reply_generator = ask_lmstudio(user_id, message_content)
    send_generated_text(reply_generator, chat_id, user_id, message_content, sent_message)

def pre_send(chat_id) -> telebot.types.Message:
    sent_message = None
    max_retries = 3
    retry_delay = 5
    message_id = None
    if isinstance(chat_id, telebot.types.Message):
        message: telebot.types.Message = chat_id
        chat_id = message.chat.id
        message_id = message.id
    for attempt in range(max_retries):
        try:
            sent_message = bot.send_message(chat_id, "üí¨", parse_mode="MarkdownV2", reply_to_message_id=message_id)
            break
        except ApiTelegramException as e:
            if handle_429_error(e, attempt, max_retries, retry_delay):
                continue
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return

    if not sent_message:
        return

    return sent_message

def send_generated_text(reply_generator, chat_id, user_id, message_content, sent_message):
    accumulated_reply = ""
    last_sent_text = ""
    text_buffer = ""
    last_update_time = time.time()
    max_retries = 3
    retry_delay = 5
    try:
        for chunk in reply_generator:
            current_time = time.time()
            new_content = chunk[len(accumulated_reply):]
            accumulated_reply += new_content
            text_buffer += new_content

            time_condition = (current_time - last_update_time) >= 1.4
            size_condition = len(text_buffer) >= 20
            force_condition = len(text_buffer) >= 40 or '\n' in new_content

            if (time_condition and size_condition) or force_condition:
                current_text = accumulated_reply.strip()
                
                if current_text == last_sent_text:
                    text_buffer = ""
                    last_update_time = current_time
                    continue

                for edit_attempt in range(max_retries):
                    try:
                        trimmed_reply = current_text
                        if '.' in trimmed_reply:
                            last_dot = trimmed_reply.rfind('.') + 1
                            trimmed_reply = trimmed_reply[:last_dot].strip()
                            
                        if trimmed_reply == last_sent_text:
                            continue

                        if len(trimmed_reply) - len(last_sent_text) < 3 and not force_condition:
                            continue

                        bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=sent_message.message_id,
                            text=escape_markdown_v2(trimmed_reply)
                        )
                        last_sent_text = trimmed_reply
                        text_buffer = text_buffer[len(trimmed_reply):]
                        last_update_time = current_time
                        break
                    except ApiTelegramException as e:
                        if "message is not modified" in str(e):
                            break
                        elif handle_429_error(e, edit_attempt, max_retries, retry_delay):
                            continue
                        else:
                            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                            break

        final_text = accumulated_reply.strip()
        if final_text and final_text != last_sent_text:
            for edit_attempt in range(max_retries):
                try:
                    escaped_final_text = escape_markdown_v2(final_text)
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=sent_message.message_id,
                        text=escaped_final_text,
                        parse_mode="MarkdownV2"
                    )
                    break
                except ApiTelegramException as e:
                    if "message is not modified" in str(e):
                        break
                    elif "can't parse entities" in str(e).lower():
                        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MarkdownV2: {e}")
                        print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: {final_text}")
                        bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=sent_message.message_id,
                            text=final_text
                        )
                        break
                    elif handle_429_error(e, edit_attempt, max_retries, retry_delay):
                        continue
                    else:
                        print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
                        break

        update_user_history(user_id, message_content, accumulated_reply)
        save_history_to_file(user_id, message_content, accumulated_reply)
        

    except Exception as e:
        handle_generation_error(e, chat_id, sent_message.message_id)
        update_user_history(user_id, message_content, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        save_history_to_file(user_id, message_content, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

def handle_429_error(e, attempt, max_retries, retry_delay):
    if e.error_code == 429 and attempt < max_retries - 1:
        wait_time = e.result_json.get('parameters', {}).get('retry_after', retry_delay)
        print(f"–û—à–∏–±–∫–∞ 429. –ñ–¥–µ–º {wait_time} —Å–µ–∫...")
        time.sleep(wait_time)
        return True
    return False

def handle_generation_error(e, chat_id, message_id):
    print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    try:
        bot.edit_message_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}",
            chat_id,
            message_id
        )
    except Exception as edit_e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {edit_e}")

def update_user_history(user_id, message, reply):
    # –ü—Ä–∏–≤–æ–¥–∏–º user_id –∫ int
    user_id = int(user_id) if isinstance(user_id, str) else user_id
    
    prompts = load_custom_prompts()
    history_length = prompts.get(str(user_id), {}).get("history_length", 8)
    
    with history_lock:  # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if user_id not in user_histories:
            user_histories[user_id] = []
        
        filtered_message = {
            "role": message["role"],
            "content": [
                item for item in message["content"] 
                if item["type"] == "text"
            ]
        }
        
        user_histories[user_id].extend([
            filtered_message,
            {"role": "assistant", "content": reply}
        ])
        
        user_histories[user_id] = user_histories[user_id][-history_length*2:]

def handle_generation_error(e, chat_id, message_id):
    print("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", e)
    error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"
    try:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=error_msg
        )
    except Exception as edit_error:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏:", edit_error)

bot.message_handler(content_types=['photo'])(handle_message_group)
bot.message_handler(content_types=['text'])(handle_message_group)

commands = [
    telebot.types.BotCommand("customize", "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"),
    telebot.types.BotCommand("reset", "–°–±—Ä–æ—Å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏"),
    telebot.types.BotCommand("food", "–ø–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –µ–¥—ã –ø–æ —Ñ–æ—Ç–æ"),
    telebot.types.BotCommand("food_edit", "–∏–∑–º–µ–Ω–∏—Ç—å —Å—É—Ç–æ—á–Ω—É—é —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π")
]

# Set bot commands
bot.set_my_commands(commands)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ polling —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
def run_polling():
    max_retries = 10
    retry_delay = 15
    while True:
        try:
            print("\033[91m–ó–∞–ø—É—Å–∫ polling...\033[0m") # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
            # Polling for new updates with increased timeout
            bot.polling(none_stop=True, interval=0, timeout=50)
        except ApiTelegramException as e:
            if e.error_code == 502:
                print(f"\033[91m–û—à–∏–±–∫–∞ Telegram API 502 Bad Gateway. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...\033[0m")
                time.sleep(retry_delay)
                continue
            else:
                print(f"\033[91m–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API: {e}\033[0m")
                break
        except Exception as e:
            print(f"\033[91m–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ polling: {e}\033[0m")
            if os.getenv("DEV_FAST") is not None:
                traceback.print_exc()
            time.sleep(retry_delay)
            if max_retries > 0:
                max_retries -= 1
                print(f"\033[91m–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {max_retries}\033[0m")
                continue
            else:
                print("\033[91m–ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.\033[0m")
                break

# Start polling with retry logic
run_polling()